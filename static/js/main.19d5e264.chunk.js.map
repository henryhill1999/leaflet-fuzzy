{"version":3,"sources":["initState.js","../../src/utils.js","../../src/FuzzyLayer.js","Map.js","App.js","index.js"],"names":["geo","JSON","stringify","type","features","properties","blurIntensity","fill","geometry","coordinates","shapeDefaults","fillOpacity","strokeWeight","stroke","strokeOpacity","drawOverlay","utils","console","container","renderer","project","scale","shapes","shape","instance","positions","f","projectedPolygon","coords","index","coord","blurfilter","PIXI","drawPolygon","FuzzyLayer","props","context","useLeafletContext","elementRef","useRef","pixiContainer","useEffect","i","L","useStyles","createUseStyles","theme","map","position","width","height","Map","classes","data","feature","cgroup","c","lat","lng","log","style","MapContainer","className","center","zoom","zoomControl","TileLayer","url","attribution","minZoom","maxZoom","ajv","Ajv","allErrors","verbose","display","body","margin","overflow","top","left","h1","fontFamily","fontWeight","fontSize","h2","h3","color","p","button","App","useState","parse","initState","value","setValue","zIndex","onChange","mode","allowedModes","ace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19d5e264.chunk.js","sourcesContent":["const geo = JSON.stringify({\n  type: \"FeatureCollection\",\n  features: [\n    {\n      type: \"Feature\",\n      properties: { blurIntensity: 40, fill: \"0x0000ff\" },\n      geometry: {\n        type: \"Polygon\",\n        coordinates: [\n          [\n            [-103.095703125, 39.40224434029275],\n            [-105.732421875, 37.19533058280065],\n            [-105.205078125, 33.94335994657882],\n            [-103.9306640625, 31.690781806136822],\n            [-99.97558593749999, 30.826780904779774],\n            [-98.4375, 33.61461929233378],\n            [-98.0419921875, 36.491973470593685],\n            [-98.9208984375, 39.30029918615029],\n            [-103.095703125, 39.40224434029275],\n          ],\n        ],\n      },\n    },\n    {\n      type: \"Feature\",\n      properties: { blurIntensity: 40, fill: \"0xff0000\" },\n      geometry: {\n        type: \"Polygon\",\n        coordinates: [\n          [\n            [-92.5048828125, 32.62087018318113],\n            [-84.6826171875, 30.713503990354965],\n            [-81.5185546875, 30.486550842588485],\n            [-80.68359375, 32.509761735919426],\n            [-77.51953125, 34.27083595165],\n            [-77.2119140625, 37.020098201368114],\n            [-77.6513671875, 40.07807142745009],\n            [-80.85937499999999, 39.13006024213511],\n            [-84.111328125, 35.746512259918504],\n            [-92.5048828125, 32.62087018318113],\n          ],\n        ],\n      },\n    },\n  ],\n});\n\nexport default geo;\n","import * as PIXI from \"pixi.js\";\n\nexport const shapeDefaults = {\n  fill: 0x3388ff,\n  fillOpacity: 0.5,\n  strokeWeight: undefined,\n  stroke: 0x3388ff,\n  strokeOpacity: 1,\n  blurIntensity: 0,\n};\n\nexport const drawPolygon = ({ shape, project, scale }) => {\n  const { positions, instance } = shape;\n\n  const {\n    fill,\n    fillOpacity,\n    strokeWeight,\n    stroke,\n    strokeOpacity,\n    blurIntensity,\n  } = {\n    ...shapeDefaults,\n    ...shape.properties,\n  };\n  console.log(shape);\n\n  instance.clear();\n  if (strokeWeight !== undefined) {\n    instance.lineStyle(strokeWeight / scale, stroke, strokeOpacity);\n  }\n\n  positions.forEach((f) => {\n    console.log(f);\n    const projectedPolygon = f.map((coords, index) => {\n      return project(coords);\n    });\n\n    instance.beginFill(fill, fillOpacity);\n    projectedPolygon.forEach(function (coord, index) {\n      if (index === 0) instance.moveTo(coord.x, coord.y);\n      else instance.lineTo(coord.x, coord.y);\n    });\n    instance.endFill();\n  });\n\n  const blurfilter = new PIXI.filters.BlurFilter();\n  instance.filters = [blurfilter];\n  blurfilter.blur = blurIntensity * scale;\n};\n\nexport const drawOverlay = ({ shapes, utils }) => {\n  console.log(\"drawing\", shapes);\n  const map = utils.getMap();\n\n  if (!map) {\n    return;\n  }\n\n  const container = utils.getContainer();\n  const renderer = utils.getRenderer();\n  const project = utils.latLngToLayerPoint;\n  const scale = utils.getScale();\n\n  shapes.forEach((shape) => {\n    drawPolygon({ shape, project, scale });\n  });\n\n  renderer.render(container);\n};\n","import { useEffect, useRef } from \"react\";\nimport { useLeafletContext } from \"@react-leaflet/core\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport * as PIXI from \"pixi.js\";\nimport \"leaflet-pixi-overlay\"; // Must be called before the 'leaflet' import\nimport L from \"leaflet\";\n\nimport { drawOverlay } from \"./utils\";\n\nfunction FuzzyLayer(props) {\n  const context = useLeafletContext();\n  const elementRef = useRef();\n  const pixiContainer = new PIXI.Container();\n\n  useEffect(() => {\n    const container = context.layerContainer || context.map;\n    const shapes = [];\n    for (let i = 0; i < props.data.length; i++) {\n      const shape = new PIXI.Graphics();\n      pixiContainer.addChild(shape);\n      shapes.push({\n        positions: props.data[i].positions,\n        instance: shape,\n        properties: props.data[i].properties,\n      });\n    }\n    elementRef.current = new L.pixiOverlay(\n      (utils) => drawOverlay({ shapes, utils }),\n      pixiContainer,\n    );\n    container.addLayer(elementRef.current);\n\n    return () => {\n      container.removeLayer(elementRef.current);\n    };\n  }, [props.data]);\n\n  return null;\n}\n\nexport default FuzzyLayer;\n","import React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { createUseStyles } from \"react-jss\";\nimport { FuzzyLayer, FuzzyPolygon } from \"leaflet-fuzzy\";\n\nconst useStyles = createUseStyles((theme) => ({\n  map: {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst Map = (props) => {\n  const classes = useStyles(props);\n\n  const features = props.data.features;\n\n  const data = features.map((feature) => {\n    if (\n      !feature.geometry ||\n      !feature.geometry.type ||\n      feature.geometry.type !== \"Polygon\"\n    ) {\n      return undefined;\n    }\n    return {\n      positions: feature.geometry.coordinates.map((cgroup) =>\n        cgroup.map((c) => ({ lat: c[1], lng: c[0] })),\n      ),\n      properties: feature.properties,\n    };\n  });\n  console.log(data);\n  return (\n    <div\n      style={{ width: \"100%\", height: \"100%\" }}\n      // onMouseMove={(e) => console.log(e)}\n    >\n      <MapContainer\n        className={classes.map}\n        center={[35, -100]}\n        zoom={5}\n        zoomControl={false}\n      >\n        {/* <GeoJSON data={}></GeoJSON> */}\n        <TileLayer\n          url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}\"\n          attribution=\"Tiles &copy; Esri &mdash; Source: US National Park Service\"\n          minZoom={2}\n          maxZoom={10}\n        />\n\n        {/* the below uses of FuzzyPolygon and FuzzyLayer are equivalent */}\n\n        {/* <FuzzyPolygon\n          positions={data[0].positions}\n          properties={data[0].properties}\n        ></FuzzyPolygon>\n        <FuzzyPolygon\n          positions={data[1].positions}\n          properties={data[1].properties}\n        ></FuzzyPolygon> */}\n\n        <FuzzyLayer data={data}></FuzzyLayer>\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { JsonEditor as Editor } from \"jsoneditor-react\";\nimport \"jsoneditor-react/es/editor.min.css\";\n\nimport initState from \"./initState\";\nimport Map from \"./Map\";\nimport Ajv from \"ajv\";\n\nimport ace from \"brace\";\nimport \"brace/mode/json\";\nimport \"brace/theme/github\";\n\nconst ajv = new Ajv({ allErrors: true, verbose: true });\n\nconst useStyles = createUseStyles({\n  \"@global\": {\n    \"#root\": {\n      position: \"absolute\",\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n    },\n    \".jsoneditor\": {\n      height: \"100vh !important\",\n    },\n    body: {\n      margin: 0,\n      height: \"100vh\",\n      width: \"100vw\",\n      position: \"fixed\",\n      overflow: \"hidden\",\n      top: \"0\",\n      left: \"0\",\n    },\n    h1: {\n      fontFamily: \"Red Hat Text\",\n      fontWeight: \"normal\",\n      fontSize: \"20px\",\n      margin: \"0\",\n    },\n    h2: {\n      fontFamily: \"Red Hat Text\",\n      fontWeight: \"normal\",\n      fontSize: \"20px\",\n      margin: \"0\",\n    },\n    h3: {\n      fontFamily: \"Roboto\",\n      fontWeight: \"normal\",\n      fontSize: \"14px\",\n      color: \"#393939\",\n      margin: \"0\",\n    },\n    p: {\n      fontSize: \"12px\",\n      fontFamily: \"Roboto\",\n    },\n    button: {\n      fontSize: \"14px\",\n      fontFamily: \"Roboto\",\n    },\n  },\n});\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const [value, setValue] = useState(JSON.parse(initState));\n\n  return (\n    <>\n      <div style={{ width: \"50vw\" }}>\n        <Map data={value} />\n      </div>\n      <div style={{ width: \"50vw\", zIndex: 100 }}>\n        <Editor\n          value={value}\n          onChange={setValue}\n          mode=\"code\"\n          allowedModes={[\"code\", \"tree\"]}\n          ajv={ajv}\n          ace={ace}\n          theme=\"ace/theme/github\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}